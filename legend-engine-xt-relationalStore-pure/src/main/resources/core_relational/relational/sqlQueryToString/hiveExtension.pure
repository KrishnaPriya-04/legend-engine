import meta::external::store::relational::functions::sqlQueryToString::hive::*;
import meta::external::store::relational::functions::sqlQueryToString::default::*;
import meta::external::store::relational::functions::sqlQueryToString::*;
import meta::external::store::relational::metamodel::operation::*;
import meta::external::store::relational::metamodel::relation::*;
import meta::external::store::relational::metamodel::*;
import meta::external::store::relational::runtime::*;
import meta::pure::router::extension::*;

function <<db.ExtensionLoader>> meta::external::store::relational::functions::sqlQueryToString::hive::dbExtensionLoaderForHive():DbExtensionLoader[1]
{
  ^DbExtensionLoader(dbType = DatabaseType.Hive, loader = createDbExtensionForHive__DbExtension_1_);
}

function <<access.private>> meta::external::store::relational::functions::sqlQueryToString::hive::createDbExtensionForHive():DbExtension[1]
{
   let reservedWords = defaultReservedWords();
   let literalProcessors = getDefaultLiteralProcessors();
   let literalProcessor = {type:Type[1]| $literalProcessors->get(if($type->instanceOf(Enumeration), | Enum, | $type))->toOne()};
   let dynaFuncDispatch = getDynaFunctionToSqlDefault($literalProcessor)->groupBy(d| $d.funcName)->getDynaFunctionDispatcher();

   ^DbExtension(
      isBooleanLiteralSupported = true,
      isDbReservedIdentifier = {str:String[1]| $str->in($reservedWords)},
      literalProcessor = $literalProcessor,
      windowColumnProcessor = processWindowColumn_WindowColumn_1__SqlGenerationContext_1__String_1_,
      selectSQLQueryProcessor = processSelectSQLQueryDefault_SelectSQLQuery_1__SqlGenerationContext_1__Boolean_1__String_1_,
      columnNameToIdentifier = columnNameToIdentifierDefault_String_1__DbConfig_1__String_1_,
      identifierProcessor = processIdentifierWithDoubleQuotes_String_1__DbConfig_1__String_1_,
      dynaFuncDispatch = $dynaFuncDispatch
   );
}
