// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::metamodel::execute::*;
import meta::external::store::relational::tests::loadCsv::*;
import meta::external::store::relational::runtime::*;
import meta::external::store::relational::tests::model::simple::*;

function <<test.Test>> meta::external::store::relational::tests::loadCsv::testLoadCsv():Boolean[1]
{
   let connection = meta::external::store::relational::tests::testRuntime(db).connections->toOne()->cast(@TestDatabaseConnection);
   meta::external::store::relational::functions::toDDL::dropAndCreateTableInDb(db, 'personCsvTable', $connection);
   loadCsvToDbTable('/core_relational/relational/functions/tests/loadCsvToDbTable/employees.csv', db.schema('default')->toOne().table('personCsvTable')->toOne(),
                     $connection);
                     
   let res = execute(|Person.all(), csvMapping, meta::external::store::relational::tests::testRuntime(), meta::pure::router::extension::defaultRelationalExtensions());
                     
   assertEquals('Joe', $res.values->at(0).firstName);
   assertEquals('Bloggs', $res.values->at(0).lastName);
   assertEquals(21, $res.values->at(0).age);
   
   assertEquals('Jill', $res.values->at(1).firstName);
   assertEquals('Smith', $res.values->at(1).lastName);
   assertEquals(31, $res.values->at(1).age);
}

###Mapping
import meta::external::store::relational::tests::model::simple::*;
import meta::external::store::relational::tests::loadCsv::*;

Mapping meta::external::store::relational::tests::loadCsv::csvMapping
(
    Person : Relational
            {
                scope([db])
                (
                    firstName : personCsvTable.FIRSTNAME,
                    lastName : personCsvTable.LASTNAME,
                    age : personCsvTable.AGE   
                )
            }
)

###Relational

Database meta::external::store::relational::tests::loadCsv::db
(
   Table personCsvTable(FIRSTNAME VARCHAR(30) PRIMARY KEY, LASTNAME VARCHAR(40), AGE INTEGER)
   
)