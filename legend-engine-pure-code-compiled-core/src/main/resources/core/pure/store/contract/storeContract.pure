// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::*;
import meta::pure::store::contract::tests::*;
import meta::pure::router::extension::*;
import meta::external::store::model::*;
import meta::pure::store::contract::*;
import meta::pure::runtime::*;
import meta::external::store::model::contract::*;

Class meta::pure::store::contract::StoreContract
{
  id : String[1];

  supports : Function<{FunctionExpression[1]->Boolean[1]}>[0..1];
  supportsStream : Function<{FunctionExpression[1]->Boolean[1]}>[0..1];
  executeStoreQuery : Function<{StoreQuery[1], RoutedValueSpecification[0..1], Mapping[1], Runtime[1], ExecutionContext[1], RouterExtension[*], DebugContext[1] -> Result<Any|*>[1]}>[0..1];
  planExecution : Function<{StoreQuery[1], RoutedValueSpecification[0..1], Mapping[0..1], Runtime[0..1], ExecutionContext[1], RouterExtension[*], DebugContext[1]->meta::pure::executionPlan::ExecutionNode[1]}>[0..1];
  localGetterOverrideMapped : Function<{Any[1], PropertyMapping[1] -> Any[*]}>[0..1];
  localGetterOverrideNonMapped : Function<{Any[1], Property<Nil,Any|*>[1] -> Any[*]}>[0..1];

  supportsSetImplementation : Function<{SetImplementation[1] -> Boolean[1]}>[0..1];
  resolveStore : Function<{ExtendedRoutedValueSpecification[1], SetImplementation[1], Mapping[1] -> meta::pure::store::metamodel::Store[1]}>[0..1];
}

function meta::pure::store::contract::systemForSetImplementation(s:SetImplementation[1], extensions:meta::pure::router::extension::RouterExtension[*]):StoreContract[1]
{
   $s->match(
      $extensions.systemMapping_systemForSetImplementation->concatenate([
         p:PureInstanceSetImplementation[1]|pureMappingStoreContract(),
         o:OperationSetImplementation[1]|pureMappingStoreContract()
      ])->toOneMany()
   )
}

function <<meta::pure::profiles::test.Test>> meta::pure::store::contract::tests::testResolveCore():Any[*]
{
   meta::external::store::model::contract::pureMappingStoreContract()->testStoreContracts();
}

function meta::pure::store::contract::tests::testStoreContracts(s:StoreContract[*]):Any[*]
{
  true
  //  $s->map(t|
  //     if($t.supportsFunctionAsString != '',|$t.supports(),|true);
  //     if($t.streamSupportedFunctionAsString != '',|$t.supportsStream(),|true);
  //     if($t.executeFunctionAsString != '',|$t.executeStoreQuery(),|true);
  //     if($t.planExecutionAsString != '',|$t.planExecution(),|true);
  //     if($t.localGetterOverrideMappedAsString != '',|$t.localGetterOverrideMapped(),|true);
  //     if($t.localGetterOverrideNonMappedAsString != '',|$t.localGetterOverrideNonMapped(),|true);
  //  );
}
